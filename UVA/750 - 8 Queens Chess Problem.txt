#include <iostream>
#include <vector>
#include<iomanip>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <numeric>
#include <set>
#include <map>
#include <assert.h> 
#include <stack>
#include <list>
#include <string>
#include <functional>
#include <unordered_set>
#include <algorithm>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;

const int INF = 0x3f3f3f3f;
const int MAX = 1e5 + 10;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;

ll gcd(ll a, ll b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b);
}
ll lcm(ll a, ll b) {
    return a * b / gcd(a, b);
}

bool prime(int n) {
    if (n < 2)
        return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

ll power(ll b, ll p) {
    if (p == 0) return 1;
    ll sq = power(b, p / 2);
    sq *= sq;

    if (p & 1)
        sq *= b;

    return sq;
}

ll ncr(ll n, ll r) {

    ll ans = 1;

    if (n - r < r)  // Since C(n, r) = C(n, n-r) as nCr = 0 when n < r;
        r = n - r;

    // Calculate value of 
    // [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1] 
    for (ll i = 0; i < r; i++) {
        ans *= n - i;
        ans /= i + 1;
    }

    return ans;
}

int ans[8];
int row[8], leftDiag[16], rightDiag[16];

bool canPlace(int c, int r) {
    if (row[r])     // check column;
        return false;

    if (leftDiag[c + r] || rightDiag[c - r + 7])    // check diagonals;
        return false;

    return true;
}

void place(int c, int r) {  // place a queen in the board;
    ans[c] = r;
    row[r] = 1;
    leftDiag[c + r] = 1;
    rightDiag[c - r + 7] = 1;
}

void unplace(int c, int r) {    // remove the queen when we backtrack;
    row[r] = 0;
    leftDiag[c + r] = 0;
    rightDiag[c - r + 7] = 0;
}

int cnt, must;
void Queens(int c) {
    if (c == 8) {
        cout << setw(2) << cnt++ << "     ";
        for (int i = 0; i < 8; i++)
            cout << " " << ans[i] + 1;

        cout << endl;
        return;
    }

    if (c == must)
        Queens(c + 1);

    else {
        for (int j = 0; j < 8; j++) {
            if (canPlace(c, j)) {     // if can place
                place(c, j);          // we place the queen
                Queens(c + 1);        // we backtrack
                unplace(c, j);        // we remove the queen after backtracking
            }
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(NULL), cout.tie(NULL), cin.tie(NULL);
    int t, first = 0;
    cin >> t;
    while (t--) {

        memset(ans, -1, sizeof ans);
        memset(row, 0, sizeof row);
        memset(leftDiag, 0, sizeof leftDiag);
        memset(rightDiag, 0, sizeof rightDiag);
        
        int r, c;
        cin >> r >> c;
        --r, --c;

        if (first) cout << endl;
        first = 1;


        cnt = 1;
        must = c;
        place(c, r);


        cout << "SOLN       COLUMN\n";
        cout << " #      1 2 3 4 5 6 7 8\n\n";
        Queens(0);

    }
    return 0;
}